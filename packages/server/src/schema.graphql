type Mutation {
  createEDBoard(name: String, description: String): IErrorReponse
  insertMonth(month: Int!, goal: Float!, yearName: Int!, description: String): IErrorReponse
  insertYear(edboardName: String!, yeargoals: YearGoalInput): IErrorReponse
}

type IEDBoard {
  id: ID!
  name: String
  description: String
  yeargoals: [IYearGoal]
}

type Query {
  edboardQuery: [IEDBoard]
  monthGoalQuery: [IMonthGoal]
  yearGoalQuery: [IYearGoal]
  yearGoalDeepQuery: [IYearToMonthMN]
  viewListingYear(yearName: Int!): IListingYear
}

type IMonthGoal {
  id: ID!
  month: Int!
  goal: Float!
  description: String
  ymmns: [IYearToMonthMN!]
}

input YearGoalInput {
  year: Int
  goal: Int
  description: String
}

type IYearGoal {
  id: ID!
  year: Int!
  goal: Int!
  description: String
  ymmns: [IYearToMonthMN]
  edboard: IEDBoard
}

type IYearToMonthMN {
  id: ID
  ygid: IYearGoal
  mgid: IMonthGoal
  description: String
}

type IErrorReponse {
  ok: Boolean
  path: String
  message: String
}

type IListingYear {
  mnInfo: [IYearToMonthMN]
  monthInfo: [IMonthGoal]
  yearInfo: [IYearGoal]
}

type Error {
  path: String!
  message: String!
}
