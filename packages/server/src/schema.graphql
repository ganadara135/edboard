type Mutation {
  createEDBoard(name: String, description: String): ErrorReponse
  insertMonth(month: Int!, goal: Float!, yearName: Int!, description: String): ErrorReponse
  insertYear(edboardName: String!, yeargoals: YearGoalInput): ErrorReponse
}

type EDBoard {
  id: ID!
  name: String
  description: String
  yeargoals: [YearGoal]
}

type Query {
  edboardQuery: [EDBoard]
  monthGoalQuery: [MonthGoal]
  yearGoalQuery: [YearGoal]
  yearGoalDeepQuery: [YearToMonthMN]
}

type MonthGoal {
  id: ID!
  month: Int!
  goal: Float!
  description: String
  ymmns: [YearToMonthMN!]
}

input YearGoalInput {
  year: Int
  goal: Int
  description: String
}

type YearGoal {
  id: ID!
  year: Int!
  goal: Int!
  description: String
  ymmns: [YearToMonthMN]
  edboard: EDBoard
}

type YearToMonthMN {
  ygid: YearGoal
  mgid: MonthGoal
  description: String
}

type ErrorReponse {
  ok: Boolean
  path: String
  message: String
}

type Error {
  path: String!
  message: String!
}
