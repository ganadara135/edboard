type Mutation {
  insertYear(edboardName: String!, yeargoals: YearGoalInput): [ErrorReponse]
  insertMonth(month: Int!, goal: Int!, yearName: Int!, description: String): [ErrorReponse]
  createListing(input: CreateListingInput!): Boolean!
  deleteListing(id: String!): Boolean!
  sendForgotPasswordEmail(email: String!): Boolean
  forgotPasswordChange(newPassword: String!, key: String!): [Error!]
  login(email: String!, password: String!): LoginResponse!
  logout: Boolean
  register(email: String!, password: String!): [Error!]
}

type ErrorReponse {
  path: String
  message: String
}

input YearGoalInput {
  year: Int
  goal: Int
  description: String
}

type YearGoal {
  id: ID!
  year: Int!
  goal: Int!
  description: String
  ymmns: [YearToMonthMN]
  edboard: EDBoard
}

type YearToMonthMN {
  ygid: YearGoal
  mgid: MonthGoal
  description: String
}

type MonthGoal {
  id: ID!
  month: Int!
  goal: Int!
  description: String
  ymmns: [YearToMonthMN!]
}

type EDBoard {
  id: ID!
  name: String
  description: String
  yeargoals: [YearGoal]
}

type Query {
  edboardQuery: [EDBoard]
  yearGoalQuery: [YearGoal]
  monthGoalQuery: [MonthGoal]
  findListings: [Listing!]!
  me: User
}

input CreateListingInput {
  name: String!
  category: String!
  description: String!
  price: Int!
  beds: Int!
  guests: Int!
  latitude: Float!
  longitude: Float!
  amenities: [String!]!
}

type Listing {
  id: ID!
  name: String!
  category: String!
  description: String!
  price: Int!
  beds: Int!
  quests: Int!
  latitude: Float!
  longitude: Float!
  amenities: [String!]!
  pictureUrl: String!
}

type LoginResponse {
  errors: [Error!]
  sessionId: String
}

type Error {
  path: String!
  message: String!
}

type User {
  id: ID!
  email: String!
}
